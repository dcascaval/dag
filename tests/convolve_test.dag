
// Convolves with a filter.
float[] convolve(float[] source,float[] mask,int n) {
  int len = (n - 2) * (n - 2);
  return for (int index : range(len)) {
    //return for (int j0 : range(dim1(source) - 2)) {
      int i = (index) / (n-2);
      int j = (index) % (n-2);

      int i0 = i; int i1 = i+1; int i2 = i+2;
      int j0 = j; int j1 = j+1; int j2 = j+2;

      float i11 = source[i0*n+j0] * mask[0];
      float i12 = source[i0*n+j1] * mask[1];
      float i13 = source[i0*n+j2] * mask[2];
      float i21 = source[i1*n+j0] * mask[3];
      float i22 = source[i1*n+j1] * mask[4];
      float i23 = source[i1*n+j2] * mask[5];
      float i31 = source[i2*n+j0] * mask[6];
      float i32 = source[i2*n+j1] * mask[7];
      float i33 = source[i2*n+j2] * mask[8];

      return i11 + i12 + i13 + 
             i21 + i22 + i23 + 
             i31 + i32 + i33;
    //};
  };
}
