// Assignment 2 (CUDA Circle Renderer Implementation) in DAG.
// Nick Roberts and Dan Cascaval, 2018

// Needs to interoperate with a C++ struct to make sense of the input data.
// Alternatively, we have a function that generates one of these from
// five arrays (float[] xs, float[] ys, float[] zs, float[] rs, int[] color)
struct circle {
  float x;
  float y;
  float z;
  float radius;
  int color;
};

// Represents one "square" unit that we used to cache circles in our CUDA translation.
// Used for intersection testing and for resolving which circles must be rendered.
struct square {
  float top;
  float bottom;
  float left;
  float right;
};

// Language features we need to get this implementation to work:
//   Additional primitives: filterWith, scan
//   Nice To Have: if then else (expressions, not statements.) -- thoughts from Nick?

// Current this is ported in from the assignment 2 starter code.
// It makes use of ternary expressions. We could implement (if then else) syntax.
bool circleIntersectsSquare(circle c, square box) {
    // Clamp circle center to box (finds the closest point on the box)
    float closestX = max(min(c.x, box.right), box.left);
    float closestY = max(min(c.y, box.top), box.bottom);

    // Is circle radius less than the distance to the closest point on the box?
    float distX = closestX - c.x;
    float distY = closestY - c.y;

    return distX * distX + distY * distY <= c.radius * c.radius;
}

// Stolen from assignment 2 starter code.
int nextPowerTwo(int n0) {
  int n1 = n0 - 1;
  int n2 = n1 | (n1 >> 1);
  int n3 = n2 | (n2 >> 2);
  int n4 = n3 | (n3 >> 4);
  int n5 = n4 | (n4 >> 8);
  int n6 = n5 | (n5 >> 16);
  return n6 + 1;
}


int numSquaresPerSide(int num_circles) {
  // We also assume (as we did in assignment 2) that the image is sized as a power
  // of two, and thus dividing the side dimension by the number of squares is sound.
  // We assume the existence of "log2". (We built it in to our language.)
  return nextPowerTwo(log2(num_circles));
  // Or some other function. Of our choosing.
}

// Partition image into squares, with the circleID portion unallocated.
// Note that this isn't super memory-efficient if we aren't reusing the circle structs.
// They aren't modifiable other than intialising fields.
square[][] partitionImage(int width, int height, int num_squares, int num_circles) {
  // We want to perform this sequentially, as in almost all cases the parallel overhead
  // will be far too high. We encode number of divisions as a byproduct of the length
  // of the square 2D array, pending us having multiple return types.

  // Assuming a definition of (exclusive) tabulate something along the lines of:
  // tabulate (start,stop,?stride) -> [start,start+stride,...,stop-stride]
  // Note: this requires some casting from int -> float at some point.
  int[] xs = tabulate(0, width / num_squares, 1);
  int[] ys = tabulate(0, height / num_squares, 1);

  // We use the parallel block to define a map.
  float fnum = float_of_int(num_squares);

  // We nest parallel maps to "graft" an array implicitly
  return parallel (int h <- ys) {
    return parallel (int w <- xs) {
      // New struct initialization syntax in action. All fields must be filled.
      return struct square {
	left = float_of_int(w) * fnum;
        right = float_of_int(w + 1) * fnum;
        top = float_of_int(h) * fnum;
        bottom = float_of_int(h + 1) * fnum;
      };
    };
  };
}

// We parallelise over everything, because we can. GPUs, baby.
// This function contains a lot of options on how the operation can be performed
// based off of the existing language primitives and a range of memory efficiency.
int[][][] scanCircles(square[][] squares, circle[] circles) {
  return parallel (square[] sub_squares <- squares) {
    return parallel (square square <- sub_squares) {

      // Option 1: perform testing and filter in two passes, making the most
      // use of our current primitives and requiring minimal modifications.
      bool[] intersections = parallel (circle c <- circles) {
        return circleIntersectsSquare(c,square);
      };

      // We explicitly allocate an array. Enumerate is the list of indices.
      int[] unfiltered_IDs = tabulate(0, dim0(circles), 1);

      // ('a [] * bool [] -> 'a []) "Maps" a filter out of an array of boolans.
      return filterWith(unfiltered_IDs, intersections);
    };
  };
}

/*

// RGBA colors represented as ints, you know, implicitly.
int getColor(int x,int offset){
  return (x >> offset) & 0xFF;
}
// Gotta be able to set them, too.
int setColor(int x,int offset,int color){
   int y = x & (~(0xFF << offset));
   return y & (color << offset);
}
// Convenience wrappers. 
int setRed(int x,int red){
  return setColor(x,24,red);
}
int setGreen(int x,int green){
  return setColor(x,16,green);
}
int setBlue(int x,int blue){
  return setColor(x,8,blue);
}
int setAlpha(int x,int alpha){
  return setColor(x,0,alpha);
}

// Blends a channel (offset) of two colors with two alpha values.
int blendColor(float a1,float a2,int c1,int c2,int offset){
  //@ requires offset in {0,8,16,24};
  float blend = (a1 * float_of_int(getColor(c1,offset)) +
                 a2 * float_of_int(getColor(c2,offset)))
  return int_of_float(blend) & 0xFF;
}

// Merges two pixels.
int addPixels(int pixelColor, int newColor) {
  float alpha = 0.5; // Constants from assignment 2. Modify?
  float oneMinusAlpha = 1.0 - alpha;

  int r = blendColor(alpha,oneMinusAlpha,pixelColor,newColor,24);
  int g = blendColor(alpha,oneMinusAlpha,pixelColor,newColor,16);
  int b = blendColor(alpha,oneMinusAlpha,pixelColor,newColor,8);
  int a = int_of_float(alpha*255.0) + (pixelColor & 0xFF);

  //Chain it up.
  return setRed(setGreen(setBlue(setAlpha(pixelColor,a),b),g),r);
}

// Distance check. An example of why we need float comparisons and binops.
bool pixelInCircle(circle c, float normX, float normY)
{
  float dx = (c.x - normX) * (c.x - normX);
  float dy = (c.y - normY) * (c.y - normY);
  return dx*dx + dy*dy <= c.radius * c.radius;
}

// Is the nesting a little ridiculous? Yes. Yes it is. Fully 4D parallelism.
int[][][][] renderSquares(square[][] squares, int[][][] scanned, circle[] circles, int num_squares, int width, int height) {
  return parallel (sub_squares <- squares) {
    return parallel (square <- sub_squares) {

      float fWidth = float_of_int(width);
      float fHeight = float_of_int(height);
      int[] xPixels = tabulate(width * square.left, width * square.right,1);
      int[] yPixels = tabulate(height * square.top, height * square.bottom,1);

      return parallel (y <- yPixels) {
        return parallel (x <- xPixels) {
          float normX = float_of_int(x) / fWidth;
          float normY = float_of_int(y) / fHeight;

          // We need some sort of indexing primitive provided by the parallel block if
          // these are going to be processed in parallel. The ZipWith is limited by the
          // fact that the function cannot be processed inline:
          // Proposition: Parallel_Zip (x <- xs; y <- ys) (xs,ys must have = length.)
          // Alternative: keyword: index0, index1, .. etc
          //              (index of the outermost level of nesting, second, etc.)

          int[] ids = scanned[index0][index1];
          bool[] ix = parallel (id <- ids) {
            return pixelInCircle(c,normX,normY);
          }

          int[] colors = parallel (id <- ids) {
            return circles[id].color;
          }

          int[] ix_colors = filterWith(colors,ix);

          // Black background comes from here. Would make it 0xFFFFFFFF for white.
          return reduce(addPixels,0,ix_colors);
        };
      };
    };
  };
}

// Traverses the block array and creates a copy.
int[][] concatPixelSubarrays (int[][][][] pixels, int width, int height) {
  int squareHeight = dim2(pixels);
  int squareWidth  = dim3(pixels);

  int[] xs = tabulate(0,width,1);
  int[] ys = tabulate(0,height,1);
  return parallel (y <- ys){
    return parallel (x <- xs){
      int i = y / squareHeight;
      int j = x / squareWidth;
      int k = y % squareHeight;
      int l = x % squareWidth;
      return pixels[i][j][k][l];
    };
  };
}

// Wrap it all together and export it to C++!
// Main function.
int[][] renderImage(int image_width, int image_height, circle[] circles){
  int num_squares = numSquaresPerSide(dim0(circles));
  square[][] squares = partitionImage(image_width,image_height,dim0(circles));
  int[][][] scanned = scanCircles(squares,circles);
  int[][][][] pixels = renderSquares(squares,scanned,circles,num_squares,image_width,image_height);
  return concatPixelSubarrays(pixels,image_width,image_height);
}*/
