// Assignment 2 (CUDA Circle Renderer Implementation) in DAG.
// Nick Roberts and Dan Cascaval, 2018

struct circle {
  float x;
  float y;
  float z;
  float radius;
  int color;
};

struct square {
  int top;
  int bottom;
  int left;
  int right;
};

bool circleIntersectsSquare(circle c, square box) {
  float top = float_of_int(box.top);
  float bottom = float_of_int(box.bottom);
  float left = float_of_int(box.left);
  float right = float_of_int(box.right);
  float closestX = max(min(c.x, right), left);
  float closestY = max(min(c.y, top), bottom);
  float distX = closestX - c.x;
  float distY = closestY - c.y;
  return distX * distX + distY * distY <= c.radius * c.radius;
}

int nextPowerTwo(int n0) {
  int n1 = n0 - 1;
  int n2 = n1 | (n1 >> 1);
  int n3 = n2 | (n2 >> 2);
  int n4 = n3 | (n3 >> 4);
  int n5 = n4 | (n4 >> 8);
  int n6 = n5 | (n5 >> 16);
  return n6 + 1;
}

int numSquaresPerSide(int num_circles) {
  return nextPowerTwo(log2(num_circles));
}

square[][] partitionImage(int width, int height, int num_squares, int num_circles) {
  int[] xs = range(width / num_squares);
  int[] ys = range(height / num_squares);

  return for (int h : ys) {
    return for (int w : xs) {
      return struct square {
	left = w * num_squares;
        right = (w + 1) * num_squares;
        top = h * num_squares;
        bottom = (h + 1) * num_squares;
      };
    };
  };
}

int[][][] scanCircles(square[][] squares, circle[] circles) {
  return for (square[] sub_squares : squares) {
    return for (square square : sub_squares) {
      bool[] intersections = for (circle c : circles) {
        return circleIntersectsSquare(c, square);
      };
      int[] unfiltered_IDs = range(dim0(circles));
      return filter_with(unfiltered_IDs, intersections);
    };
  };
}

int getColor(int x, int offset) {
  return (x >> offset) & 0xFF;
}

int setColor(int x, int offset, int color) {
  int y = x & ~(0xFF << offset);
  return y & (color << offset);
}

int setRed(int x, int red) {
  return setColor(x, 24, red);
}

int setGreen(int x, int green) {
  return setColor(x, 16, green);
}

int setBlue(int x, int blue) {
  return setColor(x, 8, blue);
}

int setAlpha(int x, int alpha) {
  return setColor(x, 0, alpha);
}

// Blends a channel (offset) of two colors with two alpha values.
int blendColor(float a1, float a2, int c1, int c2, int offset) {
  //@ requires offset in {0, 8, 16, 24};
  float blend = (a1 * float_of_int(getColor(c1, offset)) +
                 a2 * float_of_int(getColor(c2, offset)));
  return int_of_float(blend) & 0xFF;
}

int addPixels(int pixelColor, int newColor) {
  float alpha = 0.5;
  float oneMinusAlpha = 1.0 - alpha;

  int r = blendColor(alpha, oneMinusAlpha, pixelColor, newColor, 24);
  int g = blendColor(alpha, oneMinusAlpha, pixelColor, newColor, 16);
  int b = blendColor(alpha, oneMinusAlpha, pixelColor, newColor, 8);
  int a = int_of_float(alpha*255.0) + (pixelColor & 0xFF);

  return setRed(setGreen(setBlue(setAlpha(pixelColor, a), b), g), r);
}

bool pixelInCircle(circle c, float normX, float normY) {
  float dx = (c.x - normX) * (c.x - normX);
  float dy = (c.y - normY) * (c.y - normY);
  return dx*dx + dy*dy <= c.radius * c.radius;
}

int[][][][] renderSquares(
    square[][] squares,
    int[][][] scanned,
    circle[] circles,
    int num_squares,
    int width,
    int height) {
  return for (square[] sub_squares : squares) {
    return for (square square : sub_squares) {

      float fWidth = float_of_int(width);
      float fHeight = float_of_int(height);
      int left = square.left; int right = square.right;
      int top = square.top; int bottom = square.bottom;
      int[] xPixels = range(right - left);
      int[] yPixels = range(bottom - top);

      return for (int y : range(width / num_squares)) {
        return for (int x : range(width / num_squares)) {
          float normX = float_of_int(xPixels[x] + left) / fWidth;
          float normY = float_of_int(yPixels[y] + top) / fHeight;

          int[] ids = scanned[x][y];
          bool[] ix = for (int id : ids) {
            return pixelInCircle(circles[id], normX, normY);
          };

          int[] colors = for (int id : ids) {
            return circles[id].color;
          };

          int[] ix_colors = filter_with(colors, ix);

          // Black background comes from here. Would make it 0xFFFFFFFF for white.
          return reduce(addPixels, 0, ix_colors);
        };
      };
    };
  };
}

// Traverses the block array and creates a copy.
int[][] concatPixelSubarrays (int[][][][] pixels, int width, int height) {
  int squareHeight = dim2(pixels);
  int squareWidth  = dim3(pixels);

  int[] xs = range(width);
  int[] ys = range(height);
  return for (int y : ys) {
    return for (int x : xs) {
      int i = y / squareHeight;
      int j = x / squareWidth;
      int k = y % squareHeight;
      int l = x % squareWidth;
      return pixels[i][j][k][l];
    };
  };
}

// Main function.
int[][] renderImage(int image_width, int image_height, circle[] circles) {
  int num_squares = numSquaresPerSide(dim0(circles));
  square[][] squares = partitionImage(image_width, image_height, num_squares, dim0(circles));
  int[][][] scanned = scanCircles(squares, circles);
  int[][][][] pixels = renderSquares(squares, scanned, circles, num_squares, image_width, image_height);
  return concatPixelSubarrays(pixels, image_width, image_height);
}
